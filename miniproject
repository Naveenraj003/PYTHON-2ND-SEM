#db.py
import sqlite3

class Database:
    def _init_(self, db):
        self.con = sqlite3.connect(db)
        self.cur = self.con.cursor()
        sql = """
        CREATE TABLE IF NOT EXISTS students(
            id Integer Primary Key,
            name text,
            reg text,
            dob text,
            email text,
            gender text,
            contact text,
            address text
        )
        """
        self.cur.execute(sql)
        self.con.commit()

    
    def insert(self, name, reg, dob, email, gender, contact, address):
        self.cur.execute("insert into students values (NULL,?,?,?,?,?,?,?)",
                         (name, reg, dob, email, gender, contact, address))
        self.con.commit()

  
    def fetch(self):
        self.cur.execute("SELECT * from students")
        rows = self.cur.fetchall()
        return rows

   
    def remove(self, id):
        self.cur.execute("delete from students where id=?", (id,))
        self.con.commit()

   
    def update(self, id, name, reg, dob, email, gender, contact, address):
        self.cur.execute(
            "update students set name=?, reg=?, dob=?, email=?, gender=?, contact=?, address=? where id=?",
            (name, reg, dob, email, gender, contact, address, id))
        self.con.commit()
        
#main.py
from tkinter import *
from tkinter import ttk
from tkinter import messagebox
from db import Database

db = Database("Student.db")
root = Tk()
root.title("Student Management System")
root.geometry("1920x1080+0+0")
root.config(bg="#2c3e50")
root.state("zoomed")

name = StringVar()
reg = StringVar()
dob = StringVar()
gender = StringVar()
email = StringVar()
contact = StringVar()

ef = Frame(root, bg="#182459")
ef.pack(side=TOP, fill=X)
title = Label(ef, text="Student Management System", font=("Calibri", 18, "bold"), bg="#182459", fg="white")
title.grid(row=0, columnspan=2, padx=10, pady=20, sticky="w")

lbName = Label(ef, text="Name", font=("Calibri", 16), bg="#182459", fg="white")
lbName.grid(row=1, column=0, padx=10, pady=10, sticky="w")
txName = Entry(ef, textvariable=name, font=("Calibri", 16), width=30)
txName.grid(row=1, column=1, padx=10, pady=10, sticky="w")

lbreg = Label(ef, text="Reg.No", font=("Calibri", 16), bg="#182459", fg="white")
lbreg.grid(row=1, column=2, padx=10, pady=10, sticky="w")
txreg = Entry(ef, textvariable=reg, font=("Calibri", 16), width=30)
txreg.grid(row=1, column=3, padx=10, pady=10, sticky="w")

lbdob = Label(ef, text="D.O.B", font=("Calibri", 16), bg="#182459", fg="white")
lbdob.grid(row=2, column=0, padx=10, pady=10, sticky="w")
txdob = Entry(ef, textvariable=dob, font=("Calibri", 16), width=30)
txdob.grid(row=2, column=1, padx=10, pady=10, sticky="w")

lbmail = Label(ef, text="Email", font=("Calibri", 16), bg="#182459", fg="white")
lbmail.grid(row=2, column=2, padx=10, pady=10, sticky="w")
txmail = Entry(ef, textvariable=email, font=("Calibri", 16), width=30)
txmail.grid(row=2, column=3, padx=10, pady=10, sticky="w")

lbGen = Label(ef, text="Gender", font=("Calibri", 16), bg="#182459", fg="white")
lbGen.grid(row=3, column=0, padx=10, pady=10, sticky="w")
comGen = ttk.Combobox(ef, font=("Calibri", 16), width=28, textvariable=gender, state="readonly")
comGen['values'] = ("Male", "Female")
comGen.grid(row=3, column=1, padx=10, sticky="w")

lbphn = Label(ef, text="Contact No", font=("Calibri", 16), bg="#182459", fg="white")
lbphn.grid(row=3, column=2, padx=10, pady=10, sticky="w")
txphn = Entry(ef, textvariable=contact, font=("Calibri", 16), width=30)
txphn.grid(row=3, column=3, padx=10, sticky="w")

lbAdd = Label(ef, text="Address", font=("Calibri", 16), bg="#182459", fg="white")
lbAdd.grid(row=4, column=0, padx=10, pady=10, sticky="w")

txAdd = Text(ef, width=85, height=5, font=("Calibri", 16))
txAdd.grid(row=5, column=0, columnspan=4, padx=10, sticky="w")

def getData(event):
    selected_row = tv.focus()
    data = tv.item(selected_row)
    global row
    row = data["values"]
 
    name.set(row[1])
    reg.set(row[2])
    dob.set(row[3])
    email.set(row[4])
    gender.set(row[5])
    contact.set(row[6])
    txAdd.delete(1.0, END)
    txAdd.insert(END, row[7])

def dispaly():
    tv.delete(*tv.get_children())
    for row in db.fetch():
        tv.insert("", END, values=row)


def add():
    if txName.get() == "" or txreg.get() == "" or txdob.get() == "" or txmail.get() == "" or comGen.get() == "" or txphn.get() == "" or txAdd.get(
            1.0, END) == "":
        messagebox.showerror("Erorr in Input", "Please Fill All the Details")
        return
    db.insert(txName.get(),txreg.get(), txdob.get() , txmail.get() ,comGen.get(), txphn.get(), txAdd.get(
            1.0, END))
    messagebox.showinfo("Success", "Record Inserted")
    clear()
    dispaly()



def update():
    if txName.get() == "" or txreg.get() == "" or txdob.get() == "" or txmail.get() == "" or comGen.get() == "" or txphn.get() == "" or txAdd.get(
            1.0, END) == "":
        messagebox.showerror("Erorr in Input", "Please Fill All the Details")
        return
    db.update(row[0],txName.get(), txreg.get(), txdob.get(), txmail.get(), comGen.get(), txphn.get(),
              txAdd.get(1.0, END))
    messagebox.showinfo("Success", "Record Updated")
    clear()
    dispaly()


def delete():
    db.remove(row[0])
    clear()
    dispaly()


def clear():
    name.set("")
    reg.set("")
    dob.set("")
    gender.set("")
    email.set("")
    contact.set("")
    txAdd.delete(1.0, END)


bf = Frame(ef, bg="#182459")
bf.grid(row=6, column=0, columnspan=4, padx=15, pady=10, sticky="w")
btnAdd = Button(bf, command=add, text="Add Details", width=15, font=("Calibri", 16, "bold"), fg="white",
                bg="#16a085", bd=0).grid(row=0, column=0,padx=15)
btnEdit = Button(bf, command=update, text="Update Details", width=15, font=("Calibri", 16, "bold"),
                 fg="white", bg="#c223aa",bd=0).grid(row=0, column=1, padx=15)
btnDelete = Button(bf, command=delete, text="Delete Details", width=15, font=("Calibri", 16, "bold"),
                   fg="white", bg="#c0392b",
                   bd=0).grid(row=0, column=2, padx=15)
btnClear = Button(bf, command=clear, text="Clear Details", width=15, font=("Calibri", 16, "bold"), fg="white",
                  bg="#f39c12",
                  bd=0).grid(row=0, column=3, padx=15)


tf = Frame(root, bg="#ecf0f1")
tf.place(x=0, y=480, width=1550, height=520)
style = ttk.Style()
style.configure("mystyle.Treeview", font=('Calibri', 15),
                rowheight=50) 
style.configure("mystyle.Treeview.Heading", font=('Calibri', 16,'bold'))  
tv = ttk.Treeview(tf, columns=(1, 2, 3, 4, 5, 6, 7, 8), style="mystyle.Treeview")
tv.heading("1", text="ID")
tv.column("1",width=3)
tv.heading("2", text="Name")
tv.heading("3", text="Reg.No")
tv.heading("4", text="D.O.B")
tv.column("4",width=40)
tv.heading("5", text="Email")
tv.heading("6", text="Gender")
tv.column("6",width=10)
tv.heading("7", text="Contact")
tv.column("7",width=70)
tv.heading("8", text="Address")
tv['show'] = 'headings'
tv.bind("<ButtonRelease-1>", getData)
tv.pack(fill=X)

dispaly()
root.mainloop()
